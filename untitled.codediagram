{"id":-1,"name":"Onboarding diagram","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"D0Nc4eni6A","position":{"x":-470,"y":-790},"sizes":{"width":459.953125,"height":219.953125},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"src\\context\\NfcContext.js"}]},{"type":"codeBlock","attrs":{"language":"javascript","wrapCode":true},"content":[{"type":"text","text":"if (tagInfo) {   (async () => {     \nawait checkAndSetConfirmationTime(updateMedicationStatus); // Actualiza el estado del medicamento para el usuario    \n"}]}]},"nodeType":"block"},{"uid":"ZQduefLwJ7","position":{"x":70,"y":-880},"sizes":{"width":570,"height":119.96875},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"src\\services\\userUpdateMedication\\useConfirmationTime.js"}]},{"type":"codeBlock","attrs":{"language":null,"wrapCode":true},"content":[{"type":"text","text":"const checkAndSetConfirmationTime = async (updateMedicationStatus) => {     // console.log('Estoy en checkAndSetConfirmationTime');      try {         const now = new Date();         const medications = await getMedications(userId);         Alert.alert('Debug Message', ` nowTime: ${now}`);         if (!medications) return;          for (const med of medications) {              const medicationTime = combineDateAndTime(now.toISOString(), med.hora);              if (isWithinWindow(now, medicationTime)) {                  if (!med.status) {                      const newConfirmationTime = medicationTime;                     const newMedicationId = med.id;                      console.log(`Hora para confirmar(local): ${newConfirmationTime} `);                     console.log(`MedicationId(local): ${newMedicationId} `);                       await updateMedicationStatus(userId, newMedicationId);                      return; // Salimos al encontrar el primer medicamento que cumple                 } else {                     console.log('No es un medicamento para confirmar en este momento.');                 }              } else {                 console.log('No hay medicamentos en ventana de timepo para confirmar en este momento.');             }          }     } catch (error) {         console.error('Error al verificar la hora de confirmación:', error);     } };"}]}]},"nodeType":"block"},{"uid":"MCH0HHUqiR","position":{"x":120,"y":-630},"sizes":{"width":459.96875,"height":109.96875},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"src\\services\\userUpdateMedication\\useUpdateMedication.js"}]},{"type":"codeBlock","attrs":{"language":null,"wrapCode":true},"content":[{"type":"text","text":"  const updateMedicationStatus = async (userId, medicationId) => {\n        console.log(`Actualizando estado del medicamento ${medicationId} para el usuario ${userId}.`);\n        try {\n\n            const referencia = firestore().collection('Usuarios').doc(userId);\n\n            // Obtener el documento actual\n            const docSnapshot = await referencia.get();\n            if (!docSnapshot.exists) {\n                throw new Error('El usuario no existe en la base de datos.');\n            }\n\n            const userData = docSnapshot.data();\n            const confirmaciones = userData?.confirmaciones || {};\n\n            if (!confirmaciones[medicationId]) {\n                throw new Error(`El id  ${medicationId} no existe en las confirmaciones del usuario.`);\n            }\n\n            // Validar que la estructura no se altere\n            const updatedTimeEntry = {\n                ...confirmaciones[medicationId],\n                status: true, // Actualizar solo el estado\n            };\n\n            // Actualizar el documento\n            await referencia.update({\n                [`confirmaciones.${medicationId}`]: updatedTimeEntry,\n            });\n\n            console.log(`Estado actualizado correctamente para la confirmacion ${medicationId}.`);\n\n            // Llamar a la validación conjunta si el estado se actualizó\n            alert('Voy a llamar a la validacion conjunta');\n            await validateAndGrowPet(growPet);\n\n        } catch (error) {\n            console.error(`Error al actualizar el estado del medicamento: ${error.message}`);\n        }\n    };"}]}]},"nodeType":"block"},{"uid":"wgRr4nL06h","position":{"x":150,"y":-370},"sizes":{"width":399.984375,"height":140},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"src\\services\\userMedValidation\\useDailyValidation.js"}]},{"type":"codeBlock","attrs":{"language":"javascript","wrapCode":false},"content":[{"type":"text","text":"const validateAndGrowPet = async (growPet) => {\n        try {\n            console.log('Validando confirmaciones conjuntas...');\n\n            const usersRef = firestore().collection('Usuarios');\n            const usersSnapshot = await usersRef.get();\n\n            let allConfirmed = true; // Bandera para determinar si todos los medicamentos están confirmados\n\n            usersSnapshot.forEach((doc) => {\n                const userConfirmations = doc.data()?.confirmaciones || {};\n\n                // Si alguna confirmación no está en `true`, marca allConfirmed como false\n                Object.values(userConfirmations).forEach((medicationData) => {\n                    if (!medicationData.status) {\n                        allConfirmed = false;\n                    }\n                });\n            });\n\n            if (allConfirmed) {\n                console.log(\"Todos los usuarios han confirmado sus medicamentos. Haciendo crecer la mascota...\");\n                await growPet(); // Llama a la función para hacer crecer la mascota\n                await resetConfirmations(); // Reinicia confirmaciones después de hacer crecer la mascota\n            }\n        } catch (error) {\n            console.error('Error al validar confirmaciones conjuntas:', error);\n        }\n    }; "}]}]},"nodeType":"block"},{"uid":"J9pU1sWy-P","position":{"x":-470,"y":-570},"sizes":{"width":459.984375,"height":146.8125},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"codeBlock","attrs":{"language":null,"wrapCode":true},"content":[{"type":"text","text":"await validateAndGrowPet(growPet); // Valida si todos los usuarios completaron sus medicamentos   })(); }"}]}]},"nodeType":"block"},{"uid":"WdS5alHnU7","position":{"x":150,"y":-190},"sizes":{"width":399.984375,"height":111.78125},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Retorna"}]},{"type":"paragraph"}]},"nodeType":"block"}],"configs":{"centerX":372.74231471033437,"centerY":647.5284909278323,"zoomLevel":0.655555533479762},"arrowData":{"arrowsMap":{"arrow-point-bI0wBh3Ufk-bottom-point-PSPLIYKa9J-top":{"to":"point-PSPLIYKa9J-top","from":"point-bI0wBh3Ufk-bottom","label":"Normal Box","direction":"ft","selectable":true},"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"to":"point-ytXK_ayIc1-top","from":"point-bI0wBh3Ufk-bottom","label":"Code Box","direction":"ft","selectable":true},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"to":"point-6ZopTaEaDZ-left","from":"point-hyyRZE3E8u-right","label":"call","direction":"ft","selectable":true}},"pointsMap":{"point-PSPLIYKa9J-top":{"x":805.9999797489683,"y":60,"id":"point-PSPLIYKa9J-top","direction":"top"},"point-ytXK_ayIc1-top":{"x":205.99999493724206,"y":60,"id":"point-ytXK_ayIc1-top","direction":"top"},"point-6ZopTaEaDZ-left":{"x":220,"y":605.9999898744841,"id":"point-6ZopTaEaDZ-left","direction":"left"},"point-hyyRZE3E8u-right":{"x":100,"y":606,"id":"point-hyyRZE3E8u-right","direction":"right"},"point-bI0wBh3Ufk-bottom":{"x":515.9999797489683,"y":-40,"id":"point-bI0wBh3Ufk-bottom","direction":"bottom"}},"edgesMap":{"edge-D0Nc4eni6A-D0Nc4eni6A-right-ZQduefLwJ7-ZQduefLwJ7-left":{"uid":"edge-D0Nc4eni6A-D0Nc4eni6A-right-ZQduefLwJ7-ZQduefLwJ7-left","fromNodeId":"D0Nc4eni6A","fromHandleId":"D0Nc4eni6A-right","toNodeId":"ZQduefLwJ7","toHandleId":"ZQduefLwJ7-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ZQduefLwJ7-ZQduefLwJ7-bottom-MCH0HHUqiR-MCH0HHUqiR-top":{"uid":"edge-ZQduefLwJ7-ZQduefLwJ7-bottom-MCH0HHUqiR-MCH0HHUqiR-top","fromNodeId":"ZQduefLwJ7","fromHandleId":"ZQduefLwJ7-bottom","toNodeId":"MCH0HHUqiR","toHandleId":"MCH0HHUqiR-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-MCH0HHUqiR-MCH0HHUqiR-bottom-wgRr4nL06h-wgRr4nL06h-top":{"uid":"edge-MCH0HHUqiR-MCH0HHUqiR-bottom-wgRr4nL06h-wgRr4nL06h-top","fromNodeId":"MCH0HHUqiR","fromHandleId":"MCH0HHUqiR-bottom","toNodeId":"wgRr4nL06h","toHandleId":"wgRr4nL06h-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-wgRr4nL06h-wgRr4nL06h-bottom-WdS5alHnU7-WdS5alHnU7-top":{"uid":"edge-wgRr4nL06h-wgRr4nL06h-bottom-WdS5alHnU7-WdS5alHnU7-top","fromNodeId":"wgRr4nL06h","fromHandleId":"wgRr4nL06h-bottom","toNodeId":"WdS5alHnU7","toHandleId":"WdS5alHnU7-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}